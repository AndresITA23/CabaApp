{"ast":null,"code":"import * as Yup from 'yup';\nexport function initialValues() {\n  return {\n    email: \"\",\n    password: \"\",\n    repeatPassword: \"\"\n  };\n}\nexport function validationSchema() {\n  var getCharacterValidationError = function getCharacterValidationError(str) {\n    return `Your password must have at least 1 ${str} character`;\n  };\n  return Yup.object({\n    email: Yup.string().email(\"The email is invalid\").required(\"The email is required\"),\n    password: Yup.string().required(\"Please enter a password\").min(8, \"Password must have at least 8 characters\").matches(/[0-9]/, getCharacterValidationError(\"digit\")).matches(/[a-z]/, getCharacterValidationError(\"lowercase\")).matches(/[A-Z]/, getCharacterValidationError(\"uppercase\")),\n    repeatPassword: Yup.string().required(\"Please re-type your password\").oneOf([Yup.ref(\"password\")], \"The password have to be the same\")\n  });\n}","map":{"version":3,"names":["Yup","initialValues","email","password","repeatPassword","validationSchema","getCharacterValidationError","str","object","string","required","min","matches","oneOf","ref"],"sources":["C:/Users/crist/OneDrive/Documentos/GitHub/CabaApp/src/screens/Account/RegisterForm.data.ts"],"sourcesContent":["import * as Yup from 'yup';\r\n\r\nexport function initialValues() {\r\n    return {\r\n        email: \"\",\r\n        password: \"\",\r\n        repeatPassword: \"\",\r\n    }\r\n}\r\n\r\nexport function validationSchema() {\r\n    const getCharacterValidationError = (str: string) => {\r\n        return `Your password must have at least 1 ${str} character`;\r\n      };\r\n\r\n    return Yup.object({\r\n        email: Yup.string().email(\"The email is invalid\").required(\"The email is required\"),\r\n        password: Yup.string().required(\"Please enter a password\")\r\n        .min(8, \"Password must have at least 8 characters\")\r\n        // different error messages for different requirements\r\n        .matches(/[0-9]/, getCharacterValidationError(\"digit\"))\r\n        .matches(/[a-z]/, getCharacterValidationError(\"lowercase\"))\r\n        .matches(/[A-Z]/, getCharacterValidationError(\"uppercase\")),\r\n        repeatPassword: Yup.string().required(\"Please re-type your password\").oneOf([Yup.ref(\"password\")], \"The password have to be the same\"),\r\n\r\n    })\r\n}"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,KAAK;AAE1B,OAAO,SAASC,aAAaA,CAAA,EAAG;EAC5B,OAAO;IACHC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE,EAAE;IACZC,cAAc,EAAE;EACpB,CAAC;AACL;AAEA,OAAO,SAASC,gBAAgBA,CAAA,EAAG;EAC/B,IAAMC,2BAA2B,GAAG,SAA9BA,2BAA2BA,CAAIC,GAAW,EAAK;IACjD,OAAQ,sCAAqCA,GAAI,YAAW;EAC9D,CAAC;EAEH,OAAOP,GAAG,CAACQ,MAAM,CAAC;IACdN,KAAK,EAAEF,GAAG,CAACS,MAAM,CAAC,CAAC,CAACP,KAAK,CAAC,sBAAsB,CAAC,CAACQ,QAAQ,CAAC,uBAAuB,CAAC;IACnFP,QAAQ,EAAEH,GAAG,CAACS,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,yBAAyB,CAAC,CACzDC,GAAG,CAAC,CAAC,EAAE,0CAA0C,CAAC,CAElDC,OAAO,CAAC,OAAO,EAAEN,2BAA2B,CAAC,OAAO,CAAC,CAAC,CACtDM,OAAO,CAAC,OAAO,EAAEN,2BAA2B,CAAC,WAAW,CAAC,CAAC,CAC1DM,OAAO,CAAC,OAAO,EAAEN,2BAA2B,CAAC,WAAW,CAAC,CAAC;IAC3DF,cAAc,EAAEJ,GAAG,CAACS,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,8BAA8B,CAAC,CAACG,KAAK,CAAC,CAACb,GAAG,CAACc,GAAG,CAAC,UAAU,CAAC,CAAC,EAAE,kCAAkC;EAEzI,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}